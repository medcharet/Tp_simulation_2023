#include <stdio.h>
#include <iostream>
#include <stdlib.h>
#include <stdio.h>
#include <fstream>  
#include <gsl/gsl_sf_erf.h>
#include <cmath>   
#include<time.h>
#include<gsl/gsl_rng.h>
#include<gsl/gsl_randist.h>
#include<gsl/gsl_statistics_int.h>
#include<gsl/gsl_statistics_double.h>
using namespace std;


int main()
{	
	int iter;// nombre d'it?aration
	cout << "le nombre iteartion voulu : nombre iteration = ";
	cin >> iter;

	double  Euler[iter], Milshtein[iter], S_explicite[iter],W[iter];  
	double S0, r, matur, sigma ; 
	FILE *stream, *f; 
	cout << "la solution initialis?e : S0  = ";
	cin >> S0;	
	cout << "le taux d'int?ret voulu  : r = ";
	cin >> r;
	cout << "la maturit? souhait? : matur = ";
	cin >> matur;	
	cout << "la volatilit? souhait?e: sigma = ";
	cin >> sigma;	
	
			


	
	gsl_rng *g;
	g=gsl_rng_alloc(gsl_rng_mt19937);
	gsl_rng_env_setup();
	gsl_rng_set(g,time(NULL));

	
	if ((stream=fopen("C:\\Users\\hp\\Desktop\\ccc\\TP simulation C++\\tp2\\tp2.dat","w"))==NULL) 
  	{
  		fprintf(stderr,"cannot open input file.\n");
  		return 1;
 	}
 	//Initialiser  Euler et de Milshtein
	Euler[0]=S0, Milshtein[0]=S0, S_explicite[0]=S0, W[0]=0;
	
	
 	fprintf(stream,"iter   S_explicite  Euler  Milshtein\n\n"); 
	// Les solutions explicites d'Euler et Milshtein
 	fprintf(stream,"%d  %f	%f	%f\n",0,S_explicite[0],Euler[0],Milshtein[0]);
	
	
	// l'erreur quadratique 
	 
 	float err_euler=0 , err_milshtein=0;
 	float euler, milshtein ;
	
	 for (int i=0; i<=iter-1; i++)
	{	
		double G_t= gsl_ran_gaussian(g,1); 
		
		
		W[i+1]=W[i]+ G_t*sqrt(matur/iter) ; 
		
	
		S_explicite[i+1]= S0*exp((r-0.5*pow(sigma,2))*(matur/iter)+sigma*W[i+1]); 
	
		
		Euler[i+1]= Euler[i]*(1+r*(matur/iter)+sigma*(W[i+1]-W[i])); 
		
		
		Milshtein[i+1] = Milshtein[i]*(1+(r-0.5*pow(sigma,2))*(matur/iter)+sigma*(W[i+1]-W[i])+0.5*pow(sigma*(W[i+1]-W[i]),2)); 
	
		fprintf(stream,"%d  %f	%f	%f\n",i+1,S_explicite[i+1],Euler[i+1],Milshtein[i+1]); 
		
		// l'erreur quadratique par euler et milshtein : 
		err_euler=err_euler+ pow(S_explicite[i]-Euler[i],2);
		err_milshtein=err_milshtein+ pow(S_explicite[i]-Milshtein[i],2);
		
		
	}
   
   
 	fclose(stream);
 	
 	
 	euler=err_euler/iter;
    milshtein=err_milshtein/iter;
 	
 	

	f=popen("C:\\Program Files\\gnuplot\\bin\\gnuplot.exe","w");
 	fprintf(f, "set style data lines\n");
 	fprintf(f,"plot 'C:\\Users\\hp\\Desktop\\ccc\\TP simulation C++\\tp2\\tp2.dat' using 1:2 title 'S_explicite' lw 2, 'C:\\Users\\hp\\Desktop\\ccc\\TP simulation C++\\tp2\\tp2.dat' using 1:3 title 'Euler' lw 2, 'C:\\Users\\hp\\Desktop\\ccc\\TP simulation C++\\tp2\\tp2.dat.dat' using 1:4 title 'Milshtein'lw 2\n");
	fflush(f); 

 	pclose; 
 	free(stream);
 	

//  les erreurs quadratiques moyens 
 	
	 //sch?ma d'Euler : 
    printf("L'erreur quadratique par le MSEP_Euler est: %f\n",euler);
    
	//sch?ma de Milshtein : 
    printf("L'erreur quadratique par le MSEP_Milshtein est : %f\n",milshtein);


return 0;

}


